@page "/accounts"
@inject BankingApp.Client.Services.BankingService BankingService

<h3>Your Accounts</h3>

@if (accounts == null)
{
    <p><em>Loading accounts...</em></p>
}
else
{
    <ul class="list-group">
        @foreach (var account in accounts)
        {
            <li class="list-group-item">
                <b>@account.AccountType</b> - @account.AccountNumber<br />
                Balance: Â£@account.Balance

                <EditForm Model="@accountActions[account.AccountId]" OnValidSubmit="@(() => HandleTransaction(account.AccountId))">
                    <div class="input-group mt-2">
                        <InputNumber @bind-Value="accountActions[account.AccountId].Amount" class="form-control" />
                        <button type="submit" class="btn btn-success me-1" @onclick="@(() => SetAction(account.AccountId, "Deposit"))">Deposit</button>
                        <button type="submit" class="btn btn-danger" @onclick="@(() => SetAction(account.AccountId, "Withdraw"))">Withdraw</button>
                    </div>
                </EditForm>

                @if (transactionMessages.ContainsKey(account.AccountId))
                {
                    <p class="mt-1 text-info">@transactionMessages[account.AccountId]</p>
                }
            </li>
        }
    </ul>
}

<hr />
<h4>Create New Account</h4>
<EditForm Model="@newAccount" OnValidSubmit="HandleCreateAccount">
    <InputText @bind-Value="newAccount.AccountType" class="form-control" placeholder="Account Type (e.g., Checking)" />
    <InputNumber @bind-Value="newAccount.InitialBalance" class="form-control mt-2" placeholder="Initial Balance" />
    <button class="btn btn-primary mt-2">Create Account</button>
</EditForm>

<p class="mt-3">@message</p>

@code {
    private List<BankingApp.Client.Models.AccountModel>? accounts;
    private BankingApp.Client.Models.NewAccountRequest newAccount = new();
    private Dictionary<int, BankingApp.Client.Models.TransactionRequest> accountActions = new();
    private Dictionary<int, string> actionType = new();
    private Dictionary<int, string> transactionMessages = new();
    private string message = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadAccounts();
    }

    private async Task LoadAccounts()
    {
        accounts = await BankingService.GetAccounts();
        if (accounts != null)
        {
            accountActions = accounts.ToDictionary(a => a.AccountId, a => new BankingApp.Client.Models.TransactionRequest { AccountId = a.AccountId });
            actionType = accounts.ToDictionary(a => a.AccountId, a => "Deposit");
        }
    }

    private async Task HandleCreateAccount()
    {
        var success = await BankingService.CreateAccount(newAccount);
        message = success ? "Account created." : "Failed to create account.";
        newAccount = new();
        await LoadAccounts();
    }

    private void SetAction(int accountId, string type)
    {
        actionType[accountId] = type;
    }

    private async Task HandleTransaction(int accountId)
    {
        var request = accountActions[accountId];
        BankingApp.Client.Models.TransactionResponse? result = null;

        if (actionType[accountId] == "Deposit")
        {
            result = await BankingService.Deposit(request);
        }
        else
        {
            result = await BankingService.Withdraw(request);
        }

        if (result != null)
        {
            transactionMessages[accountId] = result.Message;
            await LoadAccounts(); // Refresh balances
        }

        accountActions[accountId] = new BankingApp.Client.Models.TransactionRequest { AccountId = accountId };
    }
}
